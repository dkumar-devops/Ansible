I am also working with configration mangment tool Ansible.
1. what do you understand by configuration Managment?
Configuration managment comes in picture, before we do everything manually there be a change to to manual error and the number of server increasing day by day so we have to
go to everyserver and done it manully, to overcome to that problem we starting to use confiratin mgmt tool. Suppose we to send some updates and rollbacks and we founds some bugs 
so we can not go everywhere and do that chages. in this we do ssh from 1 server changes there it will automatilly apply /deploy on the other servers also so this practice is called 
configuratin managment.
2. You are doing this confiration managemebt manully or from CI/CD?

Ans - throgh CI/CD

2. What do you understand by CI CD
In Ci we stream line the development and deployment process. once the continuos integratin is done and we have to push to remote rpository in production which is called the 
CD.

3. As we already know that there are multiple tools avavilebe in the market like Chef , puppet , salt stake why did you guys choose ansible over it ?
There are so many reason to choose Ansibel-- One of the most important reason is it is Agentless, in puppet or chef you have to istalled software or agent to manage the nodes but
in ansible it not.
second python is used for creating ansible so it is easu to under stand and learn
thrid we are using ssh password less so it is veru secure which is not using puppet and chef
fourth we can say ansible used Push articture when we write some code in our system we ahve to push it on other nodes and setup of ansible is also easy

push mean you chage in the master and the changes goes to agents

4 than what is push arc-- pull based is actually when your agent make a call to the master to chcek whether my master has done anything or ask him then synk me also every 5 secs

fifth is there is inventory in ansible

5 Have you evere used modules in ansible can you just explain?
Ansibel modues are basilly like funsction or written some of the task or stand  alone scripts where we have written some of the tasks
which task to be performed , so master node have a set of task for slave nodes which has to be performed  so the way in which any task
is written called ansible modules. Two types are modules core module and extra modules. so whenever we set up ansibles node that core
module will automatcally come, extra modeul as name suggests these are extra availabe in module if you need some timt use this extra
module. Core module is always a priority when there is a bug .

6. Invetory types can you tell me about?
As i told inventory is basically a yaml file which are writtem for Ip values of slave nodes
 there are 2 tyesp static and dynamic inventory
in static inventoru file we ahve staic IPs for slave and in dynamc inventory genrated by script  ip get chages like cloud or somthing

7 who writes this scripts for dynamic inventry
Plugins are available

8 can you tell me actual working of Ansible how it works?
9 Do you have practicle expertice of ansible valt.
10 do u used ansible tower in your project and u tell me the feature why i should used it?
11 consider a scnario you have multiple file with you and you want to copy all ther files to a tagget groups?How do you do it? 
This module is part of ansible-core and included in all Ansible installations. In most cases, you can use the short module name
copy even without specifying the collections keyword


- name: Another symbolic mode example, adding some permissions and removing others
  ansible.builtin.copy:
    src: /srv/myfiles/foo.conf
    dest: /etc/foo.conf
    owner: foo
    group: foo
    mode: u+rw,g-wx,o-rwx

12 How do u use ansibel to use decryipted filess
ansible vault incryt
ansible decypt

13 write a script


Ansible is an open-source configuration management, orchestration, and automation tool. It simplifies IT tasks by allowing you to define the desired state 
of your infrastructure in code, which is then executed across your systems. Here’s a breakdown of how Ansible works:

1. Core Concepts in Ansible
Before diving into its working, here are the key concepts:

Control Node: The machine where Ansible is installed. It orchestrates tasks by connecting to managed nodes.
Managed Nodes: The target machines where Ansible applies changes (e.g., servers, VMs, containers).
Inventory: A file or directory listing the managed nodes. You specify their IPs, hostnames, and grouping.
Modules: Units of work in Ansible (e.g., a module for copying files, installing packages, etc.).
Playbooks: YAML files containing tasks, roles, and configurations to execute on managed nodes.
Ad-Hoc Commands: One-off commands you run on managed nodes without using a playbook.
Connection Methods: Primarily SSH, but it also supports Windows protocols like WinRM.


2. Step-by-Step Working of Ansible
Step 1: Control Node Preparation
Install Ansible on the control node using package managers (e.g., pip install ansible, apt install ansible, etc.).
Create an inventory file to define managed nodes and organize them into groups (e.g., web servers, database servers).
Optionally configure SSH keys for passwordless access to the managed nodes.

Step 2: Communication with Managed Nodes
Agentless Architecture:
Unlike tools like Puppet or Chef, Ansible does not require an agent to run on managed nodes.
It communicates using standard protocols like SSH (Linux/Unix) or WinRM (Windows).
The control node runs tasks remotely by establishing SSH sessions or invoking WinRM commands.

Step 3: Execute Tasks Using Modules
When a playbook or command is executed, Ansible sends the task details to the target system.
Ansible uses modules (small programs) to perform tasks. For example:
copy module to copy files.
apt or yum module to manage packages.
service module to start/stop services.
The module executes on the managed node, and the results are returned to the control node.

Step 4: Idempotency
Ansible ensures that tasks are idempotent, meaning:
If a task is already in the desired state, it doesn’t make unnecessary changes.
For example, installing a package that is already installed won’t reinstall it.

Step 5: Execution of Playbooks
A playbook is a YAML file containing:
A list of tasks.
The target hosts or groups.
Any variables or configurations required for execution.

Example--

---
- name: Install and configure a web server
  hosts: web_servers
  tasks:
    - name: Install Apache
      apt:
        name: apache2
        state: present
    - name: Start Apache service
      service:
        name: apache2
        state: started

Playbooks can include roles, variables, conditionals, and loops for advanced configurations.

Step 6: Reporting and Feedback
Ansible provides output for each task, showing:
Success or failure.
The state of the system (e.g., "changed" or "ok").

3. Key Features of Ansible’s Architecture
Agentless
No agent installation is required on managed nodes, simplifying setup and maintenance.
Push Model
Ansible uses a push model, where tasks are initiated from the control node and "pushed" to managed nodes (as opposed to the "pull model" in Puppet).
Declarative and Imperative
Ansible allows you to define desired states (declarative) while also supporting step-by-step execution (imperative).
Extensibility
You can write custom modules in Python or integrate existing tools.

4. Typical Use Cases for Ansible
Configuration Management: Install software, configure files, and enforce system states.
Application Deployment: Deploy applications consistently across environments.
Orchestration: Automate workflows, such as multi-tier application setups.
Infrastructure as Code (IaC): Provision servers and resources declaratively.
Security Automation: Manage firewall rules, patch updates, and security policies.

5. Workflow Diagram
Here’s how the workflow looks in Ansible:

User creates a playbook and defines tasks.
Ansible uses inventory to determine the target systems.
Establishes connection with the managed nodes via SSH/WinRM.
Executes modules to apply tasks.
Collects results and displays them on the control node.


#Question asked in interview

1. wht is ansible and how it works 
2. waht is ansible galaxy 
3 what is roles
4. what is github conflict
5. How we do parallel execution in ansible
6. Write a playbook














